{
	"Promise": {
		"methods": [
			{
				"name": "then",
				"params": [
					{
						"name": "fnThen",
						"description": "Function if promise is resolved",
						"type": "function",
						"isOptional": false
					}
				],
				"description": "Promise .then",
				"returnType": "Promise",
				"visibility": "public",
				"owner": "Promise"
			},
			{
				"name": "catch",
				"params": [
					{
						"name": "fnCatch",
						"description": "Function if promise is rejected",
						"type": "function",
						"isOptional": false
					}
				],
				"description": "Promise .catch",
				"returnType": "Promise",
				"visibility": "public",
				"owner": "Promise"
			},
			{
				"name": "finally",
				"params": [
					{
						"name": "fnFinally",
						"description": "function which always triggers after resolve or reject",
						"type": "function",
						"isOptional": false
					}
				],
				"description": "Promise .finally",
				"returnType": "Promise",
				"visibility": "public",
				"owner": "Promise"
			},
			{
				"name": "all",
				"params": [
					{
						"name": "promises",
						"description": "promise array to wait",
						"type": "Promise<any>[]",
						"isOptional": false
					}
				],
				"description": "Promise .all",
				"returnType": "Promise<any[]>",
				"visibility": "public",
				"owner": "Promise"
			}
		],
		"fields": []
	},
	"Array": {
		"methods": [
			{
				"name": "concat",
				"params": [
					{
						"name": "aArray",
						"description": "Arrays and/or values to concatenate into a new array. If all valueN parameters are omitted, concat returns a shallow copy of the existing array on which it is called. See the description below for more details.",
						"type": "array",
						"isOptional": false
					}
				],
				"description": "The concat() method is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array.",
				"returnType": "array",
				"visibility": "public",
				"owner": "Array"
			},
			{
				"name": "copyWithin",
				"params": [
					{
						"name": "target",
						"description": "Zero-based index at which to copy the sequence to. If negative, target will be counted from the end.",
						"type": "number",
						"isOptional": false
					},
					{
						"name": "start",
						"description": "Zero-based index at which to start copying elements from. If negative, start will be counted from the end.",
						"type": "number",
						"isOptional": true
					},
					{
						"name": "end",
						"description": "Zero-based index at which to end copying elements from. copyWithin copies up to but not including end. If negative, end will be counted from the end.",
						"type": "number",
						"isOptional": true
					}
				],
				"description": "The copyWithin() method shallow copies part of an array to another location in the same array and returns it without modifying its length.",
				"returnType": "array",
				"visibility": "public",
				"owner": "Array"
			},
			{
				"name": "entries",
				"params": [],
				"description": "The entries() method returns a new Array Iterator object that contains the key/value pairs for each index in the array.",
				"returnType": "array",
				"visibility": "public",
				"owner": "Array"
			},
			{
				"name": "every",
				"params": [
					{
						"name": "callback",
						"description": "A function to test for each element, taking three arguments: element, index, array",
						"type": "function",
						"isOptional": false
					},
					{
						"name": "thisArg",
						"description": "A value to use as this when executing callback.",
						"type": "any",
						"isOptional": true
					}
				],
				"description": "The every() method tests whether all elements in the array pass the test implemented by the provided function. It returns a Boolean value.",
				"returnType": "boolean",
				"visibility": "public",
				"owner": "Array"
			},
			{
				"name": "fill",
				"params": [
					{
						"name": "value",
						"description": "Value to fill the array with. (Note all elements in the array will be this exact value.)",
						"type": "any",
						"isOptional": false
					},
					{
						"name": "start",
						"description": "Start index, default 0.",
						"type": "number",
						"isOptional": true
					},
					{
						"name": "end",
						"description": "End index, default arr.length.",
						"type": "number",
						"isOptional": true
					}
				],
				"description": "The fill() method changes all elements in an array to a static value, from a start index (default 0) to an end index (default array.length). It returns the modified array.",
				"returnType": "array",
				"visibility": "public",
				"owner": "Array"
			},
			{
				"name": "filter",
				"params": [
					{
						"name": "callback",
						"description": "Function is a predicate, to test each element of the array. Return a value that coerces to true to keep the element, or to false otherwise.",
						"type": "function",
						"isOptional": false
					},
					{
						"name": "thisArg",
						"description": "A value to use as this when executing callback.",
						"type": "any",
						"isOptional": true
					}
				],
				"description": "The filter() method creates a new array with all elements that pass the test implemented by the provided function.",
				"returnType": "array",
				"visibility": "public",
				"owner": "Array"
			},
			{
				"name": "find",
				"params": [
					{
						"name": "callback",
						"description": "Function to execute on each value in the array, taking 3 arguments: element, index, array",
						"type": "function",
						"isOptional": false
					},
					{
						"name": "thisArg",
						"description": "A value to use as this when executing callback.",
						"type": "any",
						"isOptional": true
					}
				],
				"description": "The find() method returns the value of the first element in the provided array that satisfies the provided testing function. If no values satisfies the testing function, undefined is returned.",
				"returnType": "any",
				"visibility": "public",
				"owner": "Array"
			},
			{
				"name": "findIndex",
				"params": [
					{
						"name": "callback",
						"description": "A function to execute on each value in the array until the function returns true, indicating that the satisfying element was found.",
						"type": "function",
						"isOptional": false
					},
					{
						"name": "thisArg",
						"description": "A value to use as this when executing callback.",
						"type": "any",
						"isOptional": true
					}
				],
				"description": "The findIndex() method returns the index of the first element in the array that satisfies the provided testing function. Otherwise, it returns -1, indicating that no element passed the test",
				"returnType": "number",
				"visibility": "public",
				"owner": "Array"
			},
			{
				"name": "flat",
				"params": [
					{
						"name": "depth",
						"description": "The depth level specifying how deep a nested array structure should be flattened. Defaults to 1.",
						"type": "number",
						"isOptional": true
					}
				],
				"description": "The flat() method creates a new array with all sub-array elements concatenated into it recursively up to the specified depth.",
				"returnType": "array",
				"visibility": "public",
				"owner": "Array"
			},
			{
				"name": "flatMap",
				"params": [
					{
						"name": "callback",
						"description": "Function that produces an element of the new Array, taking three arguments: currentValue, index, array",
						"type": "function",
						"isOptional": false
					},
					{
						"name": "thisArg",
						"description": "A value to use as this when executing callback.",
						"type": "any",
						"isOptional": true
					}
				],
				"description": "The flatMap() method returns a new array formed by applying a given callback function to each element of the array, and then flattening the result by one level. It is identical to a map() followed by a flat() of depth 1, but slightly more efficient than calling those two methods separately.",
				"returnType": "array",
				"visibility": "public",
				"owner": "Array"
			},
			{
				"name": "forEach",
				"params": [
					{
						"name": "callback",
						"description": "Function to execute on each element. It accepts between one and three arguments: currentValue, index, array",
						"type": "function",
						"isOptional": false
					},
					{
						"name": "thisArg",
						"description": "A value to use as this when executing callback.",
						"type": "any",
						"isOptional": true
					}
				],
				"description": "The forEach() method executes a provided function once for each array element.",
				"returnType": "void",
				"visibility": "public",
				"owner": "Array"
			},
			{
				"name": "includes",
				"params": [
					{
						"name": "valueToFind",
						"description": "The value to search for.",
						"type": "any",
						"isOptional": false
					},
					{
						"name": "fromIndex",
						"description": "The position in this array at which to begin searching for valueToFind.",
						"type": "number",
						"isOptional": true
					}
				],
				"description": "The includes() method determines whether an array includes a certain value among its entries, returning true or false as appropriate.",
				"returnType": "boolean",
				"visibility": "public",
				"owner": "Array"
			},
			{
				"name": "isArray",
				"params": [
					{
						"name": "value",
						"description": "The value to be checked.",
						"type": "any",
						"isOptional": false
					}
				],
				"description": "The Array.isArray() method determines whether the passed value is an Array.",
				"returnType": "boolean",
				"visibility": "public",
				"owner": "Array"
			},
			{
				"name": "indexOf",
				"params": [
					{
						"name": "searchElement",
						"description": "Element to locate in the array.",
						"type": "any",
						"isOptional": false
					},
					{
						"name": "fromIndex",
						"description": "The index to start the search at. If the index is greater than or equal to the array's length, -1 is returned, which means the array will not be searched. If the provided index value is a negative number, it is taken as the offset from the end of the array. Note: if the provided index is negative, the array is still searched from front to back. If the provided index is 0, then the whole array will be searched. Default: 0 (entire array is searched).",
						"type": "number",
						"isOptional": true
					}
				],
				"description": "The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.",
				"returnType": "number",
				"visibility": "public",
				"owner": "Array"
			},
			{
				"name": "join",
				"params": [
					{
						"name": "separator",
						"description": "Specifies a string to separate each pair of adjacent elements of the array. The separator is converted to a string if necessary. If omitted, the array elements are separated with a comma (\",\"). If separator is an empty string, all elements are joined without any characters in between them.",
						"type": "string",
						"isOptional": true
					}
				],
				"description": "The join() method creates and returns a new string by concatenating all of the elements in an array (or an array-like object), separated by commas or a specified separator string. If the array has only one item, then that item will be returned without using the separator.",
				"returnType": "string",
				"visibility": "public",
				"owner": "Array"
			},
			{
				"name": "keys",
				"params": [],
				"description": "The keys() method returns a new Array Iterator object that contains the keys for each index in the array.",
				"returnType": "array",
				"visibility": "public",
				"owner": "Array"
			},
			{
				"name": "lastIndexOf",
				"params": [
					{
						"name": "searchElement",
						"description": "Element to locate in the array.",
						"type": "any",
						"isOptional": false
					},
					{
						"name": "fromIndex",
						"description": "The index at which to start searching backwards. Defaults to the array's length minus one (arr.length - 1), i.e. the whole array will be searched. If the index is greater than or equal to the length of the array, the whole array will be searched. If negative, it is taken as the offset from the end of the array. Note that even when the index is negative, the array is still searched from back to front. If the calculated index is less than 0, -1 is returned, i.e. the array will not be searched.",
						"type": "number",
						"isOptional": true
					}
				],
				"description": "The lastIndexOf() method returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex.",
				"returnType": "number",
				"visibility": "public",
				"owner": "Array"
			},
			{
				"name": "map",
				"params": [
					{
						"name": "callback",
						"description": "Function that is called for every element of arr. Each time callback executes, the returned value is added to newArray. The callback function accepts the following arguments: currentValue, index, array",
						"type": "function",
						"isOptional": false
					},
					{
						"name": "thisArg",
						"description": "A value to use as this when executing callback.",
						"type": "any",
						"isOptional": true
					}
				],
				"description": "The map() method creates a new array populated with the results of calling a provided function on every element in the calling array.",
				"returnType": "array",
				"visibility": "public",
				"owner": "Array"
			},
			{
				"name": "pop",
				"params": [],
				"description": "The pop() method removes the last element from an array and returns that element. This method changes the length of the array.",
				"returnType": "any",
				"visibility": "public",
				"owner": "Array"
			},
			{
				"name": "push",
				"params": [
					{
						"name": "element",
						"description": "The element to add to the end of the array.",
						"type": "any",
						"isOptional": false
					}
				],
				"description": "push",
				"returnType": "number",
				"visibility": "public",
				"owner": "Array"
			},
			{
				"name": "reduce",
				"params": [
					{
						"name": "callback",
						"description": "A function to execute on each element in the array (except for the first, if no initialValue is supplied). It takes four arguments: accumulator, currentValue, index, array",
						"type": "function",
						"isOptional": false
					},
					{
						"name": "initialValue",
						"description": "A value to use as the first argument to the first call of the callback. If no initialValue is supplied, the first element in the array will be used as the initial accumulator value and skipped as currentValue. Calling reduce() on an empty array without an initialValue will throw a TypeError.",
						"type": "any",
						"isOptional": true
					}
				],
				"description": "The reduce() method executes a reducer function (that you provide) on each element of the array, resulting in single output value.",
				"returnType": "any",
				"visibility": "public",
				"owner": "Array"
			},
			{
				"name": "reduceRight",
				"params": [
					{
						"name": "callback",
						"description": "Function to execute on each value in the array, taking four arguments: accumulator, currentValue, index, array",
						"type": "function",
						"isOptional": false
					},
					{
						"name": "initialValue",
						"description": "A value to use as the first argument to the first call of the callback. If no initialValue is supplied, the first element in the array will be used as the initial accumulator value and skipped as currentValue. Calling reduce() on an empty array without an initialValue will throw a TypeError.",
						"type": "any",
						"isOptional": true
					}
				],
				"description": "The reduceRight() method applies a function against an accumulator and each value of the array (from right-to-left) to reduce it to a single value.",
				"returnType": "any",
				"visibility": "public",
				"owner": "Array"
			},
			{
				"name": "reverse",
				"params": [],
				"description": "The reverse() method reverses an array in place. The first array element becomes the last, and the last array element becomes the first.",
				"returnType": "array",
				"visibility": "public",
				"owner": "Array"
			},
			{
				"name": "shift",
				"params": [],
				"description": "The shift() method removes the first element from an array and returns that removed element. This method changes the length of the array.",
				"returnType": "any",
				"visibility": "public",
				"owner": "Array"
			},
			{
				"name": "slice",
				"params": [
					{
						"name": "start",
						"description": "Zero-based index at which to start extraction.",
						"type": "number",
						"isOptional": true
					},
					{
						"name": "end",
						"description": "Zero-based index before which to end extraction. slice extracts up to but not including end. For example, slice(1,4) extracts the second element through the fourth element (elements indexed 1, 2, and 3).",
						"type": "number",
						"isOptional": true
					}
				],
				"description": "The slice() method returns a shallow copy of a portion of an array into a new array object selected from start to end (end not included) where start and end represent the index of items in that array. The original array will not be modified.",
				"returnType": "array",
				"visibility": "public",
				"owner": "Array"
			},
			{
				"name": "some",
				"params": [
					{
						"name": "callback",
						"description": "A function to test for each element, taking three arguments: element, index, array",
						"type": "function",
						"isOptional": false
					},
					{
						"name": "thisArg",
						"description": "A value to use as this when executing callback.",
						"type": "any",
						"isOptional": true
					}
				],
				"description": "The some() method tests whether at least one element in the array passes the test implemented by the provided function. It returns a Boolean value.",
				"returnType": "boolean",
				"visibility": "public",
				"owner": "Array"
			},
			{
				"name": "sort",
				"params": [
					{
						"name": "compareFunction",
						"description": "Specifies a function that defines the sort order. If omitted, the array elements are converted to strings, then sorted according to each character's Unicode code point value. Arguments: firstElement, secondElement",
						"type": "function",
						"isOptional": true
					}
				],
				"description": "The sort() method sorts the elements of an array in place and returns the sorted array. The default sort order is ascending, built upon converting the elements into strings, then comparing their sequences of UTF-16 code units values.",
				"returnType": "array",
				"visibility": "public",
				"owner": "Array"
			},
			{
				"name": "splice",
				"params": [
					{
						"name": "start",
						"description": "The index at which to start changing the array.",
						"type": "number",
						"isOptional": false
					},
					{
						"name": "deleteCount",
						"description": "An integer indicating the number of elements in the array to remove from start.",
						"type": "number",
						"isOptional": true
					}
				],
				"description": "The splice() method changes the contents of an array by removing or replacing existing elements and/or adding new elements in place.",
				"returnType": "array",
				"visibility": "public",
				"owner": "Array"
			},
			{
				"name": "unshift",
				"params": [
					{
						"name": "element",
						"description": "The element to add to the front of the arr.",
						"type": "any",
						"isOptional": false
					}
				],
				"description": "The unshift() method adds one or more elements to the beginning of an array and returns the new length of the array.",
				"returnType": "number",
				"visibility": "public",
				"owner": "Array"
			},
			{
				"name": "values",
				"params": [],
				"description": "The values() method returns a new Array Iterator object that contains the values for each index in the array.",
				"returnType": "array",
				"visibility": "public",
				"owner": "Array"
			}
		],
		"fields": [
			{
				"name": "length",
				"description": "Length of an array",
				"type": "number",
				"visibility": "public",
				"owner": "Array"
			}
		]
	},
	"String": {
		"methods": [
			{
				"name": "concat",
				"params": [
					{
						"name": "str2",
						"description": "Strings to concatenate to str.",
						"type": "string",
						"isOptional": false
					}
				],
				"description": "The concat() method concatenates the string arguments to the calling string and returns a new string.",
				"returnType": "string",
				"visibility": "public",
				"owner": "String"
			},
			{
				"name": "includes",
				"params": [
					{
						"name": "searchString",
						"description": "A string to be searched for within str.",
						"type": "string",
						"isOptional": false
					},
					{
						"name": "position",
						"description": "The position within the string at which to begin searching for searchString. (Defaults to 0.)",
						"type": "number",
						"isOptional": true
					}
				],
				"description": "The includes() method determines whether one string may be found within another string, returning true or false as appropriate.",
				"returnType": "string",
				"visibility": "public",
				"owner": "String"
			},
			{
				"name": "endsWith",
				"params": [
					{
						"name": "searchString",
						"description": "The characters to be searched for at the end of str.",
						"type": "string",
						"isOptional": false
					},
					{
						"name": "length",
						"description": "If provided, it is used as the length of str. Defaults to str.length.",
						"type": "number",
						"isOptional": true
					}
				],
				"description": "The endsWith() method determines whether a string ends with the characters of a specified string, returning true or false as appropriate.",
				"returnType": "boolean",
				"visibility": "public",
				"owner": "String"
			},
			{
				"name": "indexOf",
				"params": [
					{
						"name": "searchValue",
						"description": "The string value to search for.",
						"type": "string",
						"isOptional": false
					},
					{
						"name": "fromIndex",
						"description": "An integer representing the index at which to start the search. Defaults to 0.",
						"type": "number",
						"isOptional": true
					}
				],
				"description": "The indexOf() method returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex. Returns -1 if the value is not found.",
				"returnType": "number",
				"visibility": "public",
				"owner": "String"
			},
			{
				"name": "slice",
				"params": [
					{
						"name": "beginIndex",
						"description": "The zero-based index at which to begin extraction. If negative, it is treated as str.length + beginIndex. (For example, if beginIndex is -3, it is treated as str.length - 3.) If beginIndex is not a number after Number(beginIndex), it is treated as 0.",
						"type": "number",
						"isOptional": false
					},
					{
						"name": "endIndex",
						"description": "The zero-based index before which to end extraction. The character at this index will not be included.",
						"type": "number",
						"isOptional": true
					}
				],
				"description": "The slice() method extracts a section of a string and returns it as a new string, without modifying the original string.",
				"returnType": "string",
				"visibility": "public",
				"owner": "String"
			},
			{
				"name": "replace",
				"params": [
					{
						"name": "beginIndex",
						"description": "A RegExp object or literal. The match or matches are replaced with newSubstr or the value returned by the specified function. \n A String that is to be replaced by newSubstr. It is treated as a literal string and is not interpreted as a regular expression. Only the first occurrence will be replaced.",
						"type": "regexp|string",
						"isOptional": false
					},
					{
						"name": "newSubstr",
						"description": "The String that replaces the substring specified by the specified regexp or substr parameter. A number of special replacement patterns are supported; \n A function to be invoked to create the new substring to be used to replace the matches to the given regexp or substr.",
						"type": "string|function",
						"isOptional": false
					}
				],
				"description": "The replace() method returns a new string with some or all matches of a pattern replaced by a replacement. The pattern can be a string or a RegExp, and the replacement can be a string or a function to be called for each match. If pattern is a string, only the first occurrence will be replaced.",
				"returnType": "string",
				"visibility": "public",
				"owner": "String"
			},
			{
				"name": "replaceAll",
				"params": [
					{
						"name": "beginIndex",
						"description": "A RegExp object or literal. The match or matches are replaced with newSubstr or the value returned by the specified function. \n A String that is to be replaced by newSubstr. It is treated as a literal string and is not interpreted as a regular expression. Only the first occurrence will be replaced.",
						"type": "regexp|string",
						"isOptional": false
					},
					{
						"name": "newSubstr",
						"description": "The String that replaces the substring specified by the specified regexp or substr parameter. A number of special replacement patterns are supported; \n A function to be invoked to create the new substring to be used to replace the matches to the given regexp or substr.",
						"type": "string|function",
						"isOptional": false
					}
				],
				"description": "The replaceAll() method returns a new string with all matches of a pattern replaced by a replacement. The pattern can be a string or a RegExp, and the replacement can be a string or a function to be called for each match.",
				"returnType": "string",
				"visibility": "public",
				"owner": "String"
			},
			{
				"name": "split",
				"params": [
					{
						"name": "separator",
						"description": "The pattern describing where each split should occur.  The separator can be a simple string or it can be a regular expression.",
						"type": "regexp|string",
						"isOptional": true
					},
					{
						"name": "limit",
						"description": "A non-negative integer specifying a limit on the number of substrings to be included in the array. If provided, splits the string at each occurrence of the specified separator, but stops when limit entries have been placed in the array. Any leftover text is not included in the array at all.",
						"type": "number",
						"isOptional": true
					}
				],
				"description": "The split() method divides a String into an ordered list of substrings, puts these substrings into an array, and returns the array.  The division is done by searching for a pattern; where the pattern is provided as the first parameter in the method's call.",
				"returnType": "array",
				"visibility": "public",
				"owner": "String"
			},
			{
				"name": "substring",
				"params": [
					{
						"name": "indexStart",
						"description": "The pattern describing where each split should occur.  The separator can be a simple string or it can be a regular expression.",
						"type": "number",
						"isOptional": false
					},
					{
						"name": "indexEnd",
						"description": "The index of the first character to exclude from the returned substring.",
						"type": "number",
						"isOptional": true
					}
				],
				"description": "The substring() method returns the part of the string between the start and end indexes, or to the end of the string.",
				"returnType": "string",
				"visibility": "public",
				"owner": "String"
			},
			{
				"name": "toUpperCase",
				"params": [],
				"description": "The toUpperCase() method returns the calling string value converted to uppercase (the value will be converted to a string if it isn't one).",
				"returnType": "string",
				"visibility": "public",
				"owner": "String"
			},
			{
				"name": "toLowerCase",
				"params": [],
				"description": "The toLowerCase() method returns the calling string value converted to lower case.",
				"returnType": "string",
				"visibility": "public",
				"owner": "String"
			},
			{
				"name": "trim",
				"params": [],
				"description": "The trim() method removes whitespace from both ends of a string. Whitespace in this context is all the whitespace characters (space, tab, no-break space, etc.) and all the line terminator characters (LF, CR, etc.).",
				"returnType": "string",
				"visibility": "public",
				"owner": "String"
			},
			{
				"name": "trimEnd",
				"params": [],
				"description": "The trimEnd() method removes whitespace from the end of a string. trimRight() is an alias of this method.",
				"returnType": "string",
				"visibility": "public",
				"owner": "String"
			},
			{
				"name": "trimStart",
				"params": [],
				"description": "The trimStart() method removes whitespace from the beginning of a string. trimLeft() is an alias of this method.",
				"returnType": "string",
				"visibility": "public",
				"owner": "String"
			}
		],
		"fields": [
			{
				"name": "length",
				"description": "Length of a string",
				"type": "number",
				"visibility": "public",
				"owner": "String"
			}
		]
	}
}